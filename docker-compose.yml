version: '3.1'
# This is applicationâ€™s services configuration for development purposes only.

x-node: &node
  image: node:15
  working_dir: /app
  volumes:
    - .:/app

services:
  db:
    image: mysql:5.7
    command: '--character-set-server=utf8 --collation-server=utf8_polish_ci --max_allowed_packet=1024M'
    ports:
      - "3306"
    environment:
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: feder
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
        test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
        timeout: 20s
        retries: 10
  # Services to regenerate frontend
  # Regenerated front-end is stored in project directory on host
  npm:
    <<: *node
    command: sh -c 'id && npm install --unsafe-perm && npm rebuild --unsafe-perm node-sass'
  gulp:
    <<: *node
    command: npx gulp build
    ports:
      - "35729:35729"
    depends_on:
      npm:
        condition: service_completed_successfully
      collectstatic:
        condition: service_completed_successfully

  # Services for Django application
  web:
    build: &webBuild
      target: development
      context: .
      args:
        # Match to production environment
        PYTHON_VERSION: '${PYTHON_VERSION:-3.7}'
        DJANGO_VERSION: '${DJANGO_VERSION:-==2.2.*}'
    volumes: &webVolumes
      - .:/code
    environment: &webEnvironment
      DATABASE_URL: mysql://root:password@db/feder
      VIRUSTOTAL_API_KEY:
      ATTACHMENTSCANNER_API_KEY:
      ATTACHMENTSCANNER_API_URL:
      METADEFENDER_API_KEY:
      AWS_S3_ACCESS_KEY_ID: &s3-access access-key
      AWS_S3_SECRET_ACCESS_KEY: &s3-secret secret-key
      AWS_S3_ENDPOINT_URL: http://minio:9000/
      AWS_STORAGE_BUCKET_NAME: 'feder'
    depends_on:
      migration:
        condition: service_completed_successfully
      collectstatic:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "8000:8000"
    # Following allows to execute `docker attach feder_web_1`
    # necessary when using ipdb in development:
    stdin_open: true
    tty: true

  worker:
    command: python manage.py process_tasks
    build: *webBuild
    volumes: *webVolumes
    environment: *webEnvironment
  collectstatic:
    command: python manage.py collectstatic --no-input
    build: *webBuild
    volumes: *webVolumes
    environment: *webEnvironment
  migration:
    command: python manage.py migrate
    build: *webBuild
    volumes: *webVolumes
    environment: *webEnvironment
    depends_on:
      db:
        condition: service_healthy
  minio:
    image: "minio/minio"
    entrypoint: sh
    # hack to precreate bucket, see https://github.com/minio/minio/issues/4769
    command: -c 'mkdir -p /data/feder && minio server /data'
    restart: always
    environment:
      MINIO_ACCESS_KEY: *s3-access
      MINIO_SECRET_KEY: *s3-secret
    volumes:
      - "minio-data:/data"
    healthcheck:
        test: ["CMD", "curl" ,"localhost:9000"]
        timeout: 20s
        retries: 10

volumes:
  mysql-data:
  minio-data:
